<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Leah&#39;s apprenticeship</title>
    <link>https://leahchung.netlify.com/posts/</link>
    <description>Recent content in Posts on Leah&#39;s apprenticeship</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 11 Jul 2019 12:50:23 +0200</lastBuildDate>
    
        <atom:link href="https://leahchung.netlify.com/posts/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day 14: Errors, Errors, go away</title>
      <link>https://leahchung.netlify.com/posts/day14/</link>
      <pubDate>Thu, 11 Jul 2019 12:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day14/</guid>
      <description>&lt;p&gt;My day started normally with a long hike to work, a daily, and a kata. Today, Wolfram joined the kata, but neither Masha nor Kay could join and Markus had to leave early.
&lt;br&gt;
&lt;br&gt;
Our current kata does not involve TDD (😱). The problem is called &amp;ldquo;&lt;a href=&#34;https://play.elevatorsaga.com&#34;&gt;Elevator Saga&lt;/a&gt;.&amp;rdquo; Each level provides a task to move &lt;i&gt;x&lt;/i&gt; amount of people in some amount of time, using only a certain number of elevators. The simulator is the main source of testing, which provides random input to test your solution.
&lt;br&gt;
&lt;br&gt;
In the katas that I joined, we only made it to level 5. Our next step was to refactor to make it more readable and pass the simulation more often (😅). Wolfram was grilling me with all these questions: &amp;ldquo;What is your goal?&amp;rdquo;, &amp;ldquo;How do you know when you have improved?&amp;rdquo;, &amp;ldquo;What is your approach?&amp;rdquo;, &amp;ldquo;What do you want to learn from this problem?&amp;rdquo;. I never thought about neither these questions nor their answers. My approach was just to pass each level.
&lt;br&gt;
&lt;br&gt;
So after explaining the half-baked solution to him, Wolfram suggested many ways to make the code more readable. He also taught me that creating an event listener inside of an event listener results in only creating the inner event listener when the outer even is triggered (and, it will do this &lt;i&gt;every&lt;/i&gt; time). This is &lt;i&gt;bad&lt;/i&gt;. My solution to this aspect was to create an event listener once for each floor object. There are many other ways in which the code needs to be improved. Right now when it is passing a floor on which people are waiting, the elevator does not pick them up. More on this tomorrow.
&lt;br&gt;
&lt;br&gt;
I also worked on Haskell today which was focused on recursion. I was getting some pretty headache-y errors in the REPL when trying to create a function that took an integer &lt;i&gt;n&lt;/i&gt; and return a list that contains each digit, in order, of &lt;i&gt;n&lt;/i&gt;.
&lt;br&gt;
&lt;br&gt;
Here is the error:
&lt;p&gt;
&lt;code&gt;Non type-variable argument in the constraint: Num [a]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;(Use FlexibleContexts to permit this)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp; When checking the inferred type&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp; &amp;emsp; go :: forall a. (Integral a, Num [a]) =&amp;gt; a -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp; In an equation for ‘digits’:&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp; &amp;emsp; digits n&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp;&amp;emsp; &amp;emsp; = go n []&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;emsp;&amp;emsp; &amp;emsp; where&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &amp;emsp;&amp;emsp; &amp;emsp; &amp;emsp; go num list&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &amp;emsp;&amp;emsp; &amp;emsp; &amp;emsp; | num == 0 = list&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &amp;emsp; &amp;emsp;&amp;emsp; &amp;emsp; | otherwise = go (num `div` 10) ([num `rem` 10] + list)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;It turns out I was creating my list incorrectly in the recursive call.
&lt;br&gt;
Instead of &lt;code&gt;([num `rem` 10] + list)&lt;/code&gt;, I need &lt;code&gt;((num `rem` 10) : list)&lt;/code&gt;. This was kind of hard to figure out because the error message is hard to interpret.
&lt;br&gt;
&lt;br&gt;
Time to end my workday normally: with a long hike home. Only this time, it&amp;rsquo;s raining.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Days 12 &amp; 13: Homework</title>
      <link>https://leahchung.netlify.com/posts/day12/</link>
      <pubDate>Wed, 10 Jul 2019 12:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day12/</guid>
      <description>&lt;p&gt;Yesterday I spent my time completing the bash tutorial and going through the Haskell book.
&lt;br&gt;
&lt;br&gt;
Here is something I came accross in the Haskell book yesterday, regarding function composition:
&lt;br&gt;
&lt;br&gt;
&amp;ldquo;&lt;code&gt;(.) :: [1](b -&amp;gt; c) -&amp;gt; [2](a -&amp;gt; b) -&amp;gt; [3](a -&amp;gt; c)&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;
In English:&lt;br&gt;
1. given a function &lt;i&gt;b&lt;/i&gt; to &lt;i&gt;c&lt;/i&gt;&lt;br&gt;
2. given a function &lt;i&gt;a&lt;/i&gt; to &lt;i&gt;b&lt;/i&gt;&lt;br&gt;
3. return a function &lt;i&gt;a&lt;/i&gt; to &lt;i&gt;c&lt;/i&gt;
&lt;br&gt;
&lt;br&gt;
The result of (&lt;i&gt;a&lt;/i&gt; -&amp;gt; &lt;i&gt;b&lt;/i&gt;) is the argument of (&lt;i&gt;b&lt;/i&gt; -&amp;gt; &lt;i&gt;c&lt;/i&gt;) so this is how we get from an &lt;i&gt;a&lt;/i&gt; argument to a &lt;i&gt;c&lt;/i&gt; result. We’ve stitched the result of one function into being the argument of another.&amp;rdquo;
&lt;br&gt;
&lt;br&gt;
This is another example of initially being very confused as a result of overthinking. I think point 3 is what really tripped me up. The wording of &amp;ldquo;returning a function&amp;rdquo; is weird to me, but the book does a nice job of explaining what exaclty happens. And for that, I am very grateful 😄.
&lt;br&gt;
&lt;br&gt;
I also spoke with Wolfram and Markus (Scheuermann, not Heilig) about potential additions to Ugurcan&amp;rsquo;s Heartbeat project. We discussed making the information more personal, with hopes to spark conversation. Markus said something like &amp;ldquo;information that encourages action.&amp;rdquo; I think that&amp;rsquo;s a good mindset to have going forward with this project. Wolfram and I briefly discussed our first step: Come up with a way to have multiple urls on rotation, where one can easily add/remove urls displaying different information. Exciting!
&lt;br&gt;
&lt;br&gt;
Today I did more Haskell and read some of the Software Crafter book. I also spent some time refreshing my memory on the short stories of Jorge Luis Borges (this urge was sparked when I saw the Haskell book quote him at the beginning of the recursion chapter), and I stumbled accross some information that he was incredibly racist and said awful things about black people. That was a disappointing tangent to which, oddly enough, the Haskell book led me.
&lt;br&gt;
&lt;br&gt;
But back to the main path of focus: Recursion, hooray! Here&amp;rsquo;s one of the first examples they give, where a number &lt;i&gt;n&lt;/i&gt; is incremented &lt;i&gt;times&lt;/i&gt; times:
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;incTimes :: (Eq a, Num a) =&amp;gt; a -&amp;gt; a -&amp;gt; a&lt;/code&gt;&lt;br&gt;
&lt;code&gt;incTimes 0 n = n&lt;/code&gt;&lt;br&gt;
&lt;code&gt;incTimes times n = 1 + (incTimes (times - 1) n)&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Then the function is called like so:&lt;br&gt;
&lt;code&gt;Prelude&amp;gt; incTimes 10 0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;10&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Prelude&amp;gt; incTimes 5 0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;5&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Prelude&amp;gt; incTimes 5 5&lt;/code&gt;&lt;br&gt;
&lt;code&gt;10&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;
The only unintuitive thing, for me, is seeing &lt;code&gt;incTimes 0 n = n&lt;/code&gt;. It&amp;rsquo;s strange to see how this is how base cases (and, similarly, conditionals) are defined. It&amp;rsquo;s just weird not to see an &lt;i&gt;if&lt;/i&gt; in there.
&lt;br&gt;
&lt;br&gt;
Otherwise, things are smooth sailing with Haskell. Things are also smooth sailing regarding my Bürgerbüro visits&amp;hellip; I finally got my tax ID!!!! The next step is the Ausländerbehörde, which is even more complicated and even more inaccessible 😅.
&lt;br&gt;
&lt;br&gt;
More on recursion tomorrow 😄
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 11: The fourth week already?!?!</title>
      <link>https://leahchung.netlify.com/posts/day11/</link>
      <pubDate>Mon, 08 Jul 2019 04:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day11/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s so weird that it is already my fourth week at HolidayCheck. Time is flying (I just realized that I have probably said this at the beginning of every week of my (adultish) life).
&lt;br&gt;
&lt;br&gt;
Today, I worked through more of the Haskell Programming book. I went over pattern matching, case examples, and higher order functions. Though the book does a good job explaining the why&amp;rsquo;s and how&amp;rsquo;s, functional programming still feels quite unintuitive to me. One thing that is hard for me to conceptualize (and I tend to overthink) is function types. An example given in the book is:
&lt;br&gt;
&lt;br&gt;
&lt;code&gt;returnAfterApply :: (a -&amp;gt; b) -&amp;gt; a -&amp;gt; c -&amp;gt; b&lt;/code&gt;
&lt;br&gt;
&lt;code&gt;returnAfterApply f a c = f a&lt;/code&gt;
&lt;br&gt;
&lt;br&gt;
At first, only looking at the function type, I&amp;rsquo;m thinking: Ok, returnAfterApply takes a function and returns a function that takes a function and returns something of type &lt;i&gt;b&lt;/i&gt;??? 😅
&lt;br&gt;
&lt;br&gt;
But then I look at the function definitions and I think: Ohhhh, so it takes three parameters: 1. a function &lt;i&gt;f&lt;/i&gt; that takes some thing of type &lt;i&gt;a&lt;/i&gt; and returns something of type &lt;i&gt;b&lt;/i&gt;, 2. something of type &lt;i&gt;a&lt;/i&gt;, and 3. something of type &lt;i&gt;c&lt;/i&gt;. Then it applies the function &lt;i&gt;f&lt;/i&gt; to &lt;i&gt;a&lt;/i&gt; and returns whatever is returned by &lt;i&gt;f&lt;/i&gt; (something of type &lt;i&gt;b&lt;/i&gt;).
&lt;br&gt;
&lt;br&gt;
Then all is good again in my brain. But still, I&amp;rsquo;m prepared for more unintuition.
&lt;br&gt;
&lt;br&gt;
Other things I did today include reading the Software Crafter book, doing part of a bash tutorial (which I really enjoy, thanks Masha!), and cloning the repo for Ugurcan&amp;rsquo;s heartbeat project. I plan to make more progress on all of these things tomorrow as well. I feel like I have plenty to do, without feeling spread too thin. It&amp;rsquo;s a good place to be 😎. But will it always be this good????
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 10: Analogies</title>
      <link>https://leahchung.netlify.com/posts/day10/</link>
      <pubDate>Wed, 03 Jul 2019 04:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day10/</guid>
      <description>&lt;p&gt;This morning started off with a difficult and &lt;i&gt;fun&lt;/i&gt; kata called the Elevator Problem (thank you to Kay for suggesting it!). The task is to transport 20 people in 60 seconds, going to the floor to pick them up and dropping them off on their desired floor. The problem and simulator can be found &lt;a href=&#34;https://play.elevatorsaga.com/&#34;&gt;here&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
We passed the level where the building was 3 stories high, but could not figure out an algorithm quick enough for a building with 4 stories. To be continued&amp;hellip; hopefully.
&lt;br&gt;
&lt;br&gt;
The rest of my day was spent with Haskell, which somehow feels like more of the same. I&amp;rsquo;m chugging along this part (previously with the topic of Type Classes, and now just starting with functions!!!!!) with the golden promise of Haskellland (yes, 3 &amp;lsquo;l&amp;rsquo;s) in horizon 😃.
&lt;br&gt;
&lt;br&gt;
I also started to read some of the Mythical Man-Month, recommended by Wolfram. The first two chapters were a bit tough to read but shared some interesting analogies. One of which compares estimating completion of programming projects to estimating when an omelette will be done. Omelettes require a lot of patience. If the customer wants the omelette in 2 minutes, they have two choices: 1) eat a raw omelette after 2 minutes or 2) wait longer for the omelette to do its thang. The cook similarly has two choices: 1) turn up the heat with the risk of an unsalvageable omelette that is burnt on the outside and runny on the inside or 2) wait for the omelette to do its thang. I thought this was a fun analogy.
&lt;br&gt;
&lt;br&gt;
There is also another part about the conceptual integrity of churches. The execution of building a church dures hundreds of years. Most of the time, the original plans are mostly adhered to and the architect&amp;rsquo;s ideas are able to come to life through the hands of hundreds, maybe thousands of builders. Other churches, however, are made up of different parts, with each part representing a different design. I had heard about this analogy to programs in one of my university courses, and it is something that really stuck with me. It is such a good mindset to at least &lt;i&gt;aim&lt;/i&gt; to make the concepts of your programs, applications, or systems portray a consistent (and timeless) set of design practices. I think the &amp;ldquo;quick-fix&amp;rdquo; mentality creates a mish-mosh product that is hard to pass on to any successor.
&lt;br&gt;
&lt;br&gt;
That&amp;rsquo;s all for today 😊
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 9: Heartbeats</title>
      <link>https://leahchung.netlify.com/posts/day9/</link>
      <pubDate>Tue, 02 Jul 2019 04:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day9/</guid>
      <description>&lt;p&gt;This morning started off with a difficult coding kata called &amp;ldquo;Double Cola.&amp;rdquo; Given a list of people in line for a vending machine, determine who buys the &lt;i&gt;n&lt;/i&gt;&amp;lsquo;th cola under the condition that every time a person drinks a cola, they are doubled (cloned) and these clones move to the end of the line. Our initial solution is to keep popping off and pushing onto the queue of people, but this is not an efficient solution (especially for large &lt;i&gt;n&lt;/i&gt; values, this broke Markus&amp;rsquo;s tddbin 😵). We know that there is a mathematical solution that will be more time and space efficient. We saw a couple of them online but were very confused about them&amp;hellip; so we will see if we continue to solve this tomorrow or move onto another problem.
&lt;br&gt;
&lt;br&gt;
Our new summer intern joined our kata this morning because she had mentioned that she was unfamiliar with TDD and wanted to learn about it. No better way to learn something than by doing it (or, at least participate while watching others do it)! Of course this was a very foreign process to me way back when I started participating in the katas (a whopping 2 weeks ago - can you believe how fast time flies!?), so I understood her confusion. It can be quite unintuitive.
&lt;br&gt;
&lt;br&gt;
Otherwise, I worked through more of the Haskell book which is starting to get a &lt;i&gt;bit&lt;/i&gt; dry. These past two chapters focus on types (type signatures, type inference, polymorphism, currying, partial application, etc.) which means that the reading is quite dense - at least to me. But the book does a nice job of eliding unecessary details and spreading out exercises nicely to periodically help pump the blood a little bit.
&lt;br&gt;
&lt;br&gt;
I also talked to Ugurcan about the heartbeat he created! This heartbeat dashboard is in many rooms around the offices and displays the previous day&amp;rsquo;s data on the number of visitors, started bookings, and completed bookings on HolidayCheck. He and Wolfram were telling me that many people want to expand this tool, so I will see what input I can get and if it interests me to take this project further.
&lt;br&gt;
&lt;br&gt;
TTFN
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 8: (Only Sometimes) Go With Your Instinct</title>
      <link>https://leahchung.netlify.com/posts/day8/</link>
      <pubDate>Fri, 28 Jun 2019 16:30:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day8/</guid>
      <description>&lt;p&gt;Today I worked on more Haskell. I also asked Sergii about the problem I shared in the previous post. As a reminder:&lt;br&gt;
&lt;code&gt; 6 / length [1, 2, 3] &lt;/code&gt;&lt;br&gt;
does not work
&lt;br&gt;
&lt;br&gt;
But, for whatever reason (which we now know),&lt;br&gt;
&lt;code&gt;6 `quot` length [1, 2, 3]&lt;/code&gt;&lt;br&gt;
works just fine.
&lt;br&gt;
&lt;br&gt;
The &lt;code&gt;length&lt;/code&gt; function returns an Int, but it turns out that the &amp;lsquo;/&amp;rsquo; operator only works on the &amp;lsquo;Fractional&amp;rsquo; typeclass, of which &amp;lsquo;Int&amp;rsquo; is not an instance. The &lt;code&gt;quot&lt;/code&gt; function works on instances of the &amp;lsquo;Integral&amp;rsquo; typeclass. Also, both functions require the arguments to be of the same type 😃
&lt;br&gt;
&lt;br&gt;
Anyways&amp;hellip; Wolfram shared a video (in the #apprenticeship channel) of an Agile lightning talk. The speaker talks about the basics of TDD and shares the very first step, which is simply &amp;ldquo;Think.&amp;rdquo; This step was relevant in my talk with Peri today. He was talking about how it&amp;rsquo;s usually the case that the ideas we have (regarding our work) when we are lying in bed (e.g. &amp;ldquo;AH! So &lt;i&gt;that&amp;rsquo;s&lt;/i&gt; the solution to my problem&amp;rdquo;, or &amp;ldquo;I just came up with the greatest solution &amp;lsquo;y&amp;rsquo; to some universal problem &amp;lsquo;x.&amp;rsquo; I&amp;rsquo;m a genius!&amp;rdquo;) are usually not as great the second or third time we think over them.
&lt;br&gt;
&lt;br&gt;
This has been relevant in many of my previous projects. I tend to jump on my first instinct on how to approach a problem, sometimes to later learn that either a) my instinct was wrong, or b) there was a much better solution. As shared in the video, the first step in TDD is just to think. It can be very powerful to practice TDD every day because it has the potential to make this process habit. I have participated in a few coding katas by now, and we always start off by reading the question and having some time to reflect and ask questions before we dive in. This is a process that is really good for me to practice.
&lt;br&gt;
&lt;br&gt;
So, when it comes to programming (or I suppose work in general), it is always good to go beyond your insticts. Think about the negatives of your approach or the alternatives to your method.
&lt;br&gt;
&lt;br&gt;
On the non-technical aspects of life, however, I do believe that it is good to go with your insticts 😉
&lt;br&gt;
&lt;br&gt;
On the final note, my one-on-one with &lt;span&gt;&amp;#193;&lt;/span&gt;lvaro included some Espa&lt;span&gt;&amp;#241;&lt;/span&gt;ol! I&amp;rsquo;m very grateful for this because my Spanish is very rusty. Also, the language part of my brain has been in overdrive the past few weeks. More than once, I have answered German (which I &lt;i&gt;barely&lt;/i&gt; understood) with Spanish. Apparently I just have to exercise that part of my brain more 😅
&lt;br&gt;
&lt;br&gt;
Here, I&amp;rsquo;ll go with the safe, universal farewell: 👋
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 7: Getting acquianted with Haskell</title>
      <link>https://leahchung.netlify.com/posts/day7/</link>
      <pubDate>Thu, 27 Jun 2019 15:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day7/</guid>
      <description>&lt;p&gt;I&amp;rsquo;d like to start off by apologizing for the short blog post. I&amp;rsquo;ve been learning a lot of basics with Haskell so I dont have many interesting, noteworthy insights save the ones to follow. Enjoy 😃
&lt;br&gt;
&lt;br&gt;
Today, I completed 3 chapters of the Haskell Book. This book is written for absolute beginners, not only to Haskell but also to programming in general. This really forced me to get into the &amp;ldquo;wearing the white belt&amp;rdquo; mindset, because I did not want to skim any part with the chances of skipping over something important for Haskell.
&lt;br&gt;
&lt;br&gt;
I did come over a quite confusing problem that I will seek answers to:
&lt;br&gt;
&lt;code&gt; 6 / length [1, 2, 3] &lt;/code&gt;&lt;br&gt;
&amp;hellip; does not work!
&lt;br&gt;
&lt;br&gt;
The type of the length function returns:&lt;br /&gt;
&lt;code&gt; length :: Foldable t =&amp;gt; t a -&amp;gt; Int &lt;/code&gt;
&lt;br&gt;
&lt;br&gt;
For whatever reason,
&lt;code&gt;6 `quot` length [1, 2, 3]&lt;/code&gt;&lt;br&gt;
works just fine.
&lt;br&gt;
&lt;br&gt;
More on the &amp;ldquo;why&amp;rdquo; later&amp;hellip;
&lt;br&gt;
&lt;br&gt;
On a non-Haskell-related-note, yesterday, I accidentally pushed my RSS feed post and I did not have time to look over it today.&lt;br /&gt;
Hopefully, I wont see any issues or catch missing information. If so, however, updates will be coming your way 😃
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 6: Sweatshop</title>
      <link>https://leahchung.netlify.com/posts/day6/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day6/</guid>
      <description>&lt;p&gt;Today really flew by. My mornings always seem over in the blink of an eye because I have my apprenticeship daily and the morning Kata. But today, I had two meetings after the Kata. The first meeting was with Markus to discuss the RSS feed for his blog and try to fix it (to no avail). The second meeting was also with Markus to discuss our plans for the friday talks. We discussed potential schedules, topics, and logistics. We ended up settling on a topic (which will remain a secret for now), so I consider this meeting a success ☺️.&lt;/p&gt;

&lt;p&gt;After this, I started creating a blog post for an RSS feed &amp;ldquo;how to&amp;rdquo; for those who create a blog with Hugo. Masha suggested doing this because it seems like other apprentices had trouble adding this feature to their Hugo blogs (unless, of course, if the feature was already implemented in their theme). Unfortunately, adding html text to a markdown file caused me a lot of trouble, so I was not able to finish it before my first workshop.&lt;/p&gt;

&lt;p&gt;My first workshop, hosted by Jens, was about remote collaboration. It was very interesting to hear the insights of people in charge of facilitating remote meetings because I never thought about their perspective. I learned that, as a remote meeting facilitator, it can be very hard to gauge how well the team members are communicating with each other. With remote communication, a lot of the face-to-face interactions are lost (e.g. body language, small talk, immediate response, etc.). The absense of these minor yet important interactions makes it much more difficulat to communicate and create a good team vibe.&lt;/p&gt;

&lt;p&gt;Unfortunately, I did not get a chance to work on any haskell today. So tomorrow, I will complete my RSS how-to post and work on Haskell.&lt;/p&gt;

&lt;p&gt;But man, my brain is fried. The workshop was 3.5 hours long and in a room that had no AC. It was a great workshop and I learned a lot, but I went through 3 full bottles of water as a result of the heat (hense the title of this post). Time to go walk home in the heat&amp;hellip; to an apartment similarly with no AC. Please keep me in your prayers (I&amp;rsquo;m just being dramatic for fun. I &lt;i&gt;think&lt;/i&gt; I&amp;rsquo;ll survive. But I&amp;rsquo;d still appreciate some prayers😅).
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to: Implement an RSS feed with Hugo</title>
      <link>https://leahchung.netlify.com/posts/rss_howto/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/rss_howto/</guid>
      <description>&lt;p&gt;Here is a guide to help you add an RSS feed to your Hugo blog.
&lt;br&gt;
1. Edit the config.toml file:
&lt;p style=&#34;margin-left: 20px&#34;&gt;a. Make sure the baseURL is valid (e.g. &#34;https://leahchung.netlify.com&#34;)&lt;br&gt;
b. Add the following lines:&lt;br&gt;
    &lt;code&gt;
        [outputs]  
        home = [ &#34;RSS&#34;, &#34;HTML&#34;]&lt;br&gt;&lt;br&gt;
        [outputFormats]
        [outputFormats.RSS]
        mediatype = &#34;application/rss&#34;
        baseName = &#34;rss&#34;
    &lt;/code&gt;
&lt;/p&gt;
2. Edit the header.html file.
&lt;p style=&#34;margin-left: 20px&#34;&gt;a. Add the following line: &lt;br&gt;
    &lt;code&gt;
        &amp;lt;link href=&#34;{{ .RSSLink }}&#34; rel=&#34;alternate&#34; type=&#34;application/rss+xml&#34; title=&#34;{{ .Site.Title }}&#34; /&amp;gt;&lt;br&gt;
    &lt;/code&gt;
    I added this in my &#39;header-widget&#39; div, but this will depend on your theme.
&lt;/p&gt;
3. Add an rss.xml file in the your_theme/layouts/ directory.  
Then add the code found &lt;a href=&#34;https://gohugo.io/templates/rss/#the-embedded-rss-xml&#34;&gt;here.&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
4. Add the following to the top of each post markdown file:  
&lt;p style=&#34;margin-left: 20px&#34;&gt;
    &lt;code&gt;
        layout: rss
    &lt;/code&gt;
&lt;/p&gt;
Voila! This should do the trick, but I suppose everyone&#39;s unique theme will create unique issues.  
I hope you found this post useful!
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 5: Software Crafter and Haskell Programming</title>
      <link>https://leahchung.netlify.com/posts/day5/</link>
      <pubDate>Mon, 24 Jun 2019 15:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day5/</guid>
      <description>&lt;p&gt;Today I started reading The Software [Crafter] by Sandro Mancuso.
&lt;br&gt;&lt;br&gt;
Something that I find really interesting is the fact that &#34;seniority&#34; was measured by how incomprehensible one could make their code. If people did not understand some code, they immediately attributed it to the author&#39;s skill or wit. Equipped with this mindset, Sandro was very eager to please and impress his manager Namur when he started at a new company on a new team. He was given a task to complete in one week, created a working solution in two days, and proudly approached Namur for feedback. Sandro received a lot of feedback, but none of it was what he was anticipating. He was especially taken aback when Namur called the clever segment of code (created to try to impress Namur by being complicated and difficult to understand) &#34;disrespectful.&#34;
&lt;br&gt;&lt;br&gt;
It is interesting to see how the norms and mentalities have changed. In contrast to the former egocentric and uninclusive mindset, the modern developer has to collaborate and communicate and hold the mentality that they are working towards the same goal as their teammates. This is something that I fully understand and agree with, but I have little experience with it. The solutions to my university projects never had to be explained. Even when I worked on a team, the responsibilities were split and each person only cared for their own tasks. There was never the need or desire to refactor code, as nobody cared to make their solution better or more readable if they already recieved a grade and had moved on to a new project. We worked with the mentality that no one would ever really look at our code (apart from the graders who were usually also students and, quite frankly, trying get their work done as quickly as possible).
&lt;br&gt;&lt;br&gt;
This is something that should be emphasized in a computer science degree because working on a team is very often a requirement in this (and any other) industry. But, as of now, this is something that I know I will have to work on when I start working on a team. I&#39;m fully prepared for other eyes reviewing my code and giving feedback on how to make it better.
&lt;br&gt;&lt;br&gt;
The rest of my time was spent with the Haskell Programming book.
The first chapter of the Haskell Programming book goes over lambda calculus. I have completed a unit on functional programming, and therefore lambda calculus, while at University, so this was not too foreign to me. Reading the chapter refreshed my memory, and I was able to work through the practice problems with no (or maybe a little) struggle. I just have to remember to evaluate the leftmost and &lt;i&gt;outermost&lt;/i&gt; lambdas first (normal order).
&lt;br&gt;&lt;br&gt;
Tomorrow is more of the same. I will continue reading the Software Crafter book and the Haskell Programming book. I setup my computer for the practice problems in the following chapter. Hopefully with these problems I will be able to integrate some vim and bash learning.
&lt;br&gt;&lt;br&gt;
Isn&#39;t it crazy that every weekday is so perfect and sunny, but every weekend is cloudy and/or rainy? When will this madness stop???? For some totally shocking information, please take a look at your Munich weather forecast for this weekend :)
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 4: FINALLY!!</title>
      <link>https://leahchung.netlify.com/posts/day4md/</link>
      <pubDate>Fri, 21 Jun 2019 15:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day4md/</guid>
      <description>&lt;p&gt;
The title of this blog post does not refer to my feelings about this week being over. It refers to my feelings about successfully setting up the RSS for my blog (Thank you to my PPM Alvaro for suggesting better blog post titles. Your suggestion was well-received).
&lt;br&gt;&lt;br&gt;
Today:&lt;br&gt;
After trying many methods to make my RSS feed link valid, I finally (FINALLY!) came to the solution which was in my config.toml file. The base URL was &#34;http:leahchung.netlify.com&#34; rather than &#34;https://leahchung.netlify.com&#34;. Silly me. This one small change proved hours&#39; worth of work to be useless, but that makes it all the more satisfying to see the green &#34;congratulations!&#34; on the page of the RSS-feed-link-validator website. Here is the link so if you want to share my joy: https://validator.w3.org/feed/check.cgi?url=https%3A//leahchung.netlify.com/rss.xml
&lt;br&gt;&lt;br&gt;

Next week:&lt;br&gt;
Next week, I plan to start my journey with Haskell. I got some recommendations to use Haskell Book which includes a lot of exercises. This sounds like it would be good for me because I learn best by doing (and doing again). I was also reminded that I can change my language at any time, so if I find Haskell too hair-pulling or unenjoyable, then I can switch to another.  
I also plan to start reading Software Craftsmanship and order a public speaking book. Public speaking is something that I have experience with because I taught discussion sections to students when I was an instructional aide at my University. Despite my practice, I am nowhere near perfect. It still frightens me, so hopefully a book will help calm some of these nerves.  
I also have to get better at the dailies. Wolfram suggested doing some research and deciding how to use the 15 minutes to gain/give as much as I can.
&lt;br&gt;&lt;br&gt;
My first week:&lt;br&gt;  
I can&#39;t believe my first week at HolidayCheck is coming to an end! This week was filled with a lot of firsts for me. I joined my first (and second) coding kata, participated in my first mob programming session, made a lot of first impressions, and started my first real job (!). I plan to have many more firsts during my apprenticeship at HolidayCheck, and I&#39;m really excited! In addition to all of this, I set up my blog, came up with an agenda for the next two months with Peri, and worked out ALMOST all of the administrative stuff (I just need that darn tax ID...). Overall, I had a really good first week at HolidayCheck.
&lt;br&gt;&lt;br&gt;
I&#39;m excited for what is to come, but for now...  
Prost to the freakin&#39; weekend! (A Rihanna lyric with a German twist)
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 3: Piling things onto my TODO list</title>
      <link>https://leahchung.netlify.com/posts/day3/</link>
      <pubDate>Wed, 19 Jun 2019 15:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/day3/</guid>
      <description>&lt;p&gt;
My main focus today was to work on my blog. I deployed it to netlify yesterday (thank you to the former/current apprentice(s) for the recommendation), but it was a very simply blog theme. Today I worked on making it prettier :).
&lt;br&gt;&lt;br&gt;
I also met with my mentor, Peri, today. We went over my self-assessment and starting talking about my areas of focus for the next two months. My first area of concern is tooling. When it comes to git, vim and bash, I only know the things that I needed for my University projects. I never quite understood why I was doing the things I was. Then comes testing. The idea that was engrained in my head by my professors is to write tests before you write code. This is something that was always emphasized, but never enforced. Since I was eager to solve the problems, I RARELY did this. And by rarely I mean once or twice. As a result, I never learned how to write good test cases. There were requirements for our test cases to break the instructors&#39; buggy code, but these were often completed last-minute, and therefore with little consideration.
&lt;br&gt;&lt;br&gt;
The language I chose to learn is Haskell. I have some experience with functional programming but not enough to be comfortable with it. I think learning Haskell will be a challenge for me as it is for many people accustomed to, well, anything but functional programming.
&lt;br&gt;&lt;br&gt;
So, to kill three birds with one stone, I will go through a Haskell book that has exercises and incorporate tests and tools when possible.
&lt;br&gt;&lt;br&gt;
When this all gets overwhelming or boring, I intend to read The Software Crafter and a book on public speaking (More on this later).
&lt;br&gt;&lt;br&gt;
Now, time for a day off. How convenient that I started work on a week with a public holiday :) - though this was completely a coincidence, I swear.
&lt;br&gt;&lt;br&gt;
Since I spent a little more time on prettifying my blog, I will work on adding it to the HolidayCheck Apprentice page on Friday.
&lt;br&gt;&lt;br&gt;
Ciao!
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Days 1 &amp; 2</title>
      <link>https://leahchung.netlify.com/posts/my-first-post/</link>
      <pubDate>Tue, 18 Jun 2019 15:50:23 +0200</pubDate>
      
      <guid>https://leahchung.netlify.com/posts/my-first-post/</guid>
      <description>&lt;p&gt;
My first couple of days at HolidayCheck went really well, my first impression of the company was really great!
&lt;br&gt;&lt;br&gt;
Upon arrival at HolidayCheck, I was greeted by current and former software engineer apprentices. After short introductions, I was shown to my desk. My equipment was all set, and I even recieved some gifts from the company! I was then introduced to everyone that Peri and I could find. There are many people and many names... but the &#34;National Specialties BBQ&#34; helped me familiarize myself with some of the employees.
&lt;br&gt;&lt;br&gt;
I got the chance to spend a lot of time with my PPM, Alvaro, throughout the day. He answered all the questions I had (and I&#39;m sure many more to come), talked about his experience at HolidayCheck, and made me feel really comfortable with the whole onboarding process.
&lt;br&gt;&lt;br&gt;
The rest of my time is spent going through a checklist of tasks from Wolfram, which consists of various things from exploring Logbook to organising a social event. I think I am making pretty good progress.
Some of my tasks for the week are create a blog, write a blog post every day, and start a self-organization method. The self-organization method will take some research and consideration (right now I am just using the Notes app to keep track of things I want to accomplish today)... so more on that later.
&lt;br&gt;&lt;br&gt;
My plans for the rest of the day are to add my blog to HolidayCheck&#39;s apprenticeship page, complete the self assessment, and ENJOY THE WEATHER!
&lt;br&gt;&lt;br&gt;
Everyone has been super friendly and open, which has made the transition of starting a new job in a new country extremely pleasant. I&#39;m excited for what is to come!
&lt;br&gt;&lt;br&gt;
Bis Morgen:)
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
